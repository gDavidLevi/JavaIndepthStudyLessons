
Паттерн "strategy" (стратегия) - применяем интерфейс для избежания множественной перегрузки методов

Паттерн "observer" (наблюдатель, листенер) - позволяет следить за стостоянием объекта

Паттерн "builder" (построитель) - позволяет строить объекты при этом заполнять не все поля

Паттерн "adapter" (адаптер) - переходник, который позволяет пользоваться одним интерфейсом из других классов других
интерфейсов, которые этот интерфейс никак не реализуют и логически с ним не связаны

Паттерн "abstractFactory" (абстрактная фабрика) - создание объектов под разные архитектуры. Например: под разные
абстрактные архитектуры создать единого создателя.

Паттерн "factory" (фабрика) - создает объекты по характеристикам

Паттерн "singleton" (синглтон) - создает только один уникальный объект класса

Паттерн "mvc" (Model-View-Controller):
    Модель (Model) предоставляет данные и реагирует на команды контроллера, изменяя свое состояние
    Представление (View) отвечает за отображение данных модели пользователю, реагируя на изменения модели
    Контроллер (Controller) интерпретирует действия пользователя, оповещая модель о необходимости изменений



